version: '3.4'

services:
    backend:
        image: notekunn/kma-news-backend
        container_name: kma-news-backend
        environment:
            NODE_ENV: production
            PORT: 8080
            DATABASE_URL: "mongodb://${DB_USERNAME}:${DB_PASSWORD}@db:27017/${DB_NAME}?auth\
                Source=admin"
            REDIS_URL: "redis://cache:6379"
            SECRET: secret_for_token
            REFRESH_SECRET: secret_for_refresh_token
            CACHE_TTL: 60
            ACCESS_TOKEN_TTL: 600
            REFRESH_TOKEN_TTL: 86400
            VIRTUAL_HOST: "${BACKEND_HOST}"
            LETSENCRYPT_HOST: "${BACKEND_HOST}"
            VIRTUAL_PORT: 8080
            IS_REMOVE_OLD_TOKEN: "true"
            ZALO_APP_ID: "${ZALO_APP_ID}"
            ZALO_SECRET_KEY: "${ZALO_SECRET_KEY}"

        depends_on:
            - db
        expose:
            - 8080
        ports:
            - "${BACKEND_PORT}:8080"
        networks:
            - db-network
            - redis-network
            - app-network
        command: yarn backend deploy

    frontend:
        image: notekunn/kma-news-frontend
        container_name: kma-news-frontend
        environment:
            REACT_APP_API_URL: "https://${BACKEND_HOST}"
            VIRTUAL_HOST: "${FRONTEND_HOST}"
            LETSENCRYPT_HOST: "${FRONTEND_HOST}"
            VIRTUAL_PORT: 80
        expose:
            - 80
        ports:
            - "${FRONTEND_PORT}:80"
        networks:
            - app-network
        command: [ "nginx", "-g", "daemon off;" ]

    admin:
        image: notekunn/kma-news-admin
        container_name: kma-news-admin
        environment:
            REACT_APP_API_URL: "https://${BACKEND_HOST}"
            VIRTUAL_HOST: "${ADMIN_HOST}"
            LETSENCRYPT_HOST: "${ADMIN_HOST}"
            VIRTUAL_PORT: 80
        expose:
            - 80
        ports:
            - "${ADMIN_PORT}:80"
        networks:
            - app-network
        command: [ "nginx", "-g", "daemon off;" ]

    db:
        image: mongo
        container_name: kma-news-db
        environment:
            - "MONGO_INITDB_DATABASE=${DB_NAME}"
            - "MONGO_INITDB_ROOT_USERNAME=${DB_USERNAME}"
            - "MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD}"
        volumes:
            - appdata:/data/db
        ports:
            - 27017:27017
        restart: always
        networks:
            - db-network
    cache:
        image: redis:5-alpine
        container_name: kma-news-cache
        volumes:
            - appcache:/data
        networks:
            - redis-network
        restart: unless-stopped
        ports:
            - 6379:6379
    crawler:
        image: notekunn/kma-news-crawler
        container_name: kma-news-crawler
        depends_on:
            - db
            - cache
        environment:
            DATABASE_URL: "mongodb://${DB_USERNAME}:${DB_PASSWORD}@db:27017/${DB_NAME}?auth\
                Source=admin"
            REDIS_URL: "redis://cache:6379"
            PORT: 5000
        ports:
            - ${CRAWLER_PORT}:5000
        networks:
            - db-network
            - redis-network
        command: yarn crawler deploy

    nginx-proxy:
        image: nginxproxy/nginx-proxy:alpine
        container_name: nginx-proxy
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - conf:/etc/nginx/conf.d
            - vhost:/etc/nginx/vhost.d
            - html:/usr/share/nginx/html
            - dhparam:/etc/nginx/dhparam
            - certs:/etc/nginx/certs:ro
            - /var/run/docker.sock:/tmp/docker.sock:ro
        networks:
            - app-network
        labels:
            - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"

    acme-companion:
        image: nginxproxy/acme-companion
        container_name: nginx-proxy-acme
        depends_on:
            - "nginx-proxy"
        volumes:
            - conf:/etc/nginx/conf.d
            - vhost:/etc/nginx/vhost.d
            - html:/usr/share/nginx/html
            - dhparam:/etc/nginx/dhparam
            - certs:/etc/nginx/certs
            - acme:/etc/acme.sh
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            - app-network

volumes:
    appdata: null
    appcache: null
    nginx_secrets: null
    data: null
    conf: null
    vhost: null
    html: null
    dhparam: null
    certs: null
    acme: null

networks:
    db-network:
        driver: bridge
    redis-network:
        driver: bridge
    app-network:
        driver: bridge
